name: CI/CD (PR build; main deploy)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  packages: write # push to GHCR on main

jobs:
  # --- Build-only check for PRs ---
  pr-build:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: false
          platforms: linux/amd64
          tags: ghcr.io/${{ github.repository_owner }}/albear-t:pr-check
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- Build & push on main ---
  build-and-push:
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ghcr.io/${{ github.repository_owner }}/albear-t:latest
            ghcr.io/${{ github.repository_owner }}/albear-t:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # --- Deploy from EC2 self-hosted runner ---
  deploy:
    needs: build-and-push
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: [self-hosted, prod] # <- your EC2 runner's labels
    steps:
      - uses: actions/checkout@v4

      - name: Docker login to GHCR (pull)
        run: echo "${GHCR_PAT}" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
        env:
          GHCR_PAT: ${{ secrets.GHCR_PAT }}

      - name: Pull & restart via Compose
        run: |
          docker compose -f deploy/docker-compose.prod.yml pull
          docker compose -f deploy/docker-compose.prod.yml up -d
          docker image prune -f

      - name: Health check (container -> localhost)
        run: |
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost)
            if [ "$code% " != "% " ] && [ "$code" -ge 200 ] && [ "$code" -lt 500 ]; then
              echo "Healthy ($code)"; exit 0
            fi
            sleep 2
          done
          echo "Unhealthy after 60s"; docker compose -f deploy/docker-compose.prod.yml logs --tail=200
          exit 1
